// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/api-gateway.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/api-gateway.proto

It has these top-level messages:
	EmptyMessage
	VersionResponse
	ServiceStatus
	ServicesStatusList
	EchoRequest
	EchoResponse
	ProfileInfo
	ProfileRequest
	ProfileResponse
	ProfileCreationRequest
	ProfileListRequest
	ProfileList
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/gomeet/go-proto-gomeetfaker"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Genders int32

const (
	Genders_UNKNOW Genders = 0
	Genders_MALE   Genders = 1
	Genders_FEMALE Genders = 2
)

var Genders_name = map[int32]string{
	0: "UNKNOW",
	1: "MALE",
	2: "FEMALE",
}
var Genders_value = map[string]int32{
	"UNKNOW": 0,
	"MALE":   1,
	"FEMALE": 2,
}

func (x Genders) String() string {
	return proto.EnumName(Genders_name, int32(x))
}
func (Genders) EnumDescriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{0} }

type ServiceStatus_Status int32

const (
	ServiceStatus_OK          ServiceStatus_Status = 0
	ServiceStatus_UNAVAILABLE ServiceStatus_Status = 1
)

var ServiceStatus_Status_name = map[int32]string{
	0: "OK",
	1: "UNAVAILABLE",
}
var ServiceStatus_Status_value = map[string]int32{
	"OK":          0,
	"UNAVAILABLE": 1,
}

func (x ServiceStatus_Status) String() string {
	return proto.EnumName(ServiceStatus_Status_name, int32(x))
}
func (ServiceStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorApiGateway, []int{2, 0}
}

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{0} }

// VersionMessage represents a version message
type VersionResponse struct {
	// Id represents the message identifier.
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{1} }

func (m *VersionResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// SeviceStatus represents a sub services status message
type ServiceStatus struct {
	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string               `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Status  ServiceStatus_Status `protobuf:"varint,3,opt,name=status,proto3,enum=grpc.gomeetexamples.apigateway.ServiceStatus_Status" json:"status,omitempty"`
	EMsg    string               `protobuf:"bytes,4,opt,name=e_msg,json=eMsg,proto3" json:"e_msg,omitempty"`
}

func (m *ServiceStatus) Reset()                    { *m = ServiceStatus{} }
func (m *ServiceStatus) String() string            { return proto.CompactTextString(m) }
func (*ServiceStatus) ProtoMessage()               {}
func (*ServiceStatus) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{2} }

func (m *ServiceStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceStatus) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ServiceStatus) GetStatus() ServiceStatus_Status {
	if m != nil {
		return m.Status
	}
	return ServiceStatus_OK
}

func (m *ServiceStatus) GetEMsg() string {
	if m != nil {
		return m.EMsg
	}
	return ""
}

// ServicesStatusList is the sub services status list
type ServicesStatusList struct {
	Services []*ServiceStatus `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *ServicesStatusList) Reset()                    { *m = ServicesStatusList{} }
func (m *ServicesStatusList) String() string            { return proto.CompactTextString(m) }
func (*ServicesStatusList) ProtoMessage()               {}
func (*ServicesStatusList) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{3} }

func (m *ServicesStatusList) GetServices() []*ServiceStatus {
	if m != nil {
		return m.Services
	}
	return nil
}

// EchoRequest represents a simple message sent to the Echo service.
type EchoRequest struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{4} }

func (m *EchoRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *EchoRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// EchoResponse represents a simple message that the Echo service return.
type EchoResponse struct {
	Uuid    string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *EchoResponse) Reset()                    { *m = EchoResponse{} }
func (m *EchoResponse) String() string            { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()               {}
func (*EchoResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{5} }

func (m *EchoResponse) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *EchoResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// ProfileInfo encodes information about a profile.
type ProfileInfo struct {
	Uuid      string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Gender    Genders `protobuf:"varint,2,opt,name=gender,proto3,enum=grpc.gomeetexamples.apigateway.Genders" json:"gender,omitempty"`
	Email     string  `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Name      string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Birthday  string  `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	CreatedAt string  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt string  `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (m *ProfileInfo) Reset()                    { *m = ProfileInfo{} }
func (m *ProfileInfo) String() string            { return proto.CompactTextString(m) }
func (*ProfileInfo) ProtoMessage()               {}
func (*ProfileInfo) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{6} }

func (m *ProfileInfo) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ProfileInfo) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

func (m *ProfileInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ProfileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileInfo) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *ProfileInfo) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ProfileInfo) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *ProfileInfo) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

// ProfileRequest encodes a profile identifier.
type ProfileRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *ProfileRequest) Reset()                    { *m = ProfileRequest{} }
func (m *ProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileRequest) ProtoMessage()               {}
func (*ProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{7} }

func (m *ProfileRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

// ProfileResponse encodes the result of a profile operation.
type ProfileResponse struct {
	Ok   bool         `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Info *ProfileInfo `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{8} }

func (m *ProfileResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ProfileResponse) GetInfo() *ProfileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// ProfileCreationRequest encodes a profile creation request.
type ProfileCreationRequest struct {
	Gender   Genders `protobuf:"varint,1,opt,name=gender,proto3,enum=grpc.gomeetexamples.apigateway.Genders" json:"gender,omitempty"`
	Email    string  `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Name     string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Birthday string  `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (m *ProfileCreationRequest) Reset()                    { *m = ProfileCreationRequest{} }
func (m *ProfileCreationRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileCreationRequest) ProtoMessage()               {}
func (*ProfileCreationRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{9} }

func (m *ProfileCreationRequest) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

func (m *ProfileCreationRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ProfileCreationRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileCreationRequest) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

// ProfileListRequest encodes a set of criteria for the retrieval of a list of profiles.
type ProfileListRequest struct {
	PageNumber         uint32  `protobuf:"varint,1,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize           uint32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order              string  `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	ExcludeSoftDeleted bool    `protobuf:"varint,4,opt,name=exclude_soft_deleted,json=excludeSoftDeleted,proto3" json:"exclude_soft_deleted,omitempty"`
	SoftDeletedOnly    bool    `protobuf:"varint,5,opt,name=soft_deleted_only,json=softDeletedOnly,proto3" json:"soft_deleted_only,omitempty"`
	Gender             Genders `protobuf:"varint,6,opt,name=gender,proto3,enum=grpc.gomeetexamples.apigateway.Genders" json:"gender,omitempty"`
}

func (m *ProfileListRequest) Reset()                    { *m = ProfileListRequest{} }
func (m *ProfileListRequest) String() string            { return proto.CompactTextString(m) }
func (*ProfileListRequest) ProtoMessage()               {}
func (*ProfileListRequest) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{10} }

func (m *ProfileListRequest) GetPageNumber() uint32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *ProfileListRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ProfileListRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ProfileListRequest) GetExcludeSoftDeleted() bool {
	if m != nil {
		return m.ExcludeSoftDeleted
	}
	return false
}

func (m *ProfileListRequest) GetSoftDeletedOnly() bool {
	if m != nil {
		return m.SoftDeletedOnly
	}
	return false
}

func (m *ProfileListRequest) GetGender() Genders {
	if m != nil {
		return m.Gender
	}
	return Genders_UNKNOW
}

// ProfileList encodes the result of a ProfileListRequest.
type ProfileList struct {
	ResultSetSize uint32         `protobuf:"varint,1,opt,name=result_set_size,json=resultSetSize,proto3" json:"result_set_size,omitempty"`
	HasMore       bool           `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	Profiles      []*ProfileInfo `protobuf:"bytes,3,rep,name=profiles" json:"profiles,omitempty"`
}

func (m *ProfileList) Reset()                    { *m = ProfileList{} }
func (m *ProfileList) String() string            { return proto.CompactTextString(m) }
func (*ProfileList) ProtoMessage()               {}
func (*ProfileList) Descriptor() ([]byte, []int) { return fileDescriptorApiGateway, []int{11} }

func (m *ProfileList) GetResultSetSize() uint32 {
	if m != nil {
		return m.ResultSetSize
	}
	return 0
}

func (m *ProfileList) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *ProfileList) GetProfiles() []*ProfileInfo {
	if m != nil {
		return m.Profiles
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "grpc.gomeetexamples.apigateway.EmptyMessage")
	golang_proto.RegisterType((*EmptyMessage)(nil), "grpc.gomeetexamples.apigateway.EmptyMessage")
	proto.RegisterType((*VersionResponse)(nil), "grpc.gomeetexamples.apigateway.VersionResponse")
	golang_proto.RegisterType((*VersionResponse)(nil), "grpc.gomeetexamples.apigateway.VersionResponse")
	proto.RegisterType((*ServiceStatus)(nil), "grpc.gomeetexamples.apigateway.ServiceStatus")
	golang_proto.RegisterType((*ServiceStatus)(nil), "grpc.gomeetexamples.apigateway.ServiceStatus")
	proto.RegisterType((*ServicesStatusList)(nil), "grpc.gomeetexamples.apigateway.ServicesStatusList")
	golang_proto.RegisterType((*ServicesStatusList)(nil), "grpc.gomeetexamples.apigateway.ServicesStatusList")
	proto.RegisterType((*EchoRequest)(nil), "grpc.gomeetexamples.apigateway.EchoRequest")
	golang_proto.RegisterType((*EchoRequest)(nil), "grpc.gomeetexamples.apigateway.EchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "grpc.gomeetexamples.apigateway.EchoResponse")
	golang_proto.RegisterType((*EchoResponse)(nil), "grpc.gomeetexamples.apigateway.EchoResponse")
	proto.RegisterType((*ProfileInfo)(nil), "grpc.gomeetexamples.apigateway.ProfileInfo")
	golang_proto.RegisterType((*ProfileInfo)(nil), "grpc.gomeetexamples.apigateway.ProfileInfo")
	proto.RegisterType((*ProfileRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileRequest")
	golang_proto.RegisterType((*ProfileRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileRequest")
	proto.RegisterType((*ProfileResponse)(nil), "grpc.gomeetexamples.apigateway.ProfileResponse")
	golang_proto.RegisterType((*ProfileResponse)(nil), "grpc.gomeetexamples.apigateway.ProfileResponse")
	proto.RegisterType((*ProfileCreationRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileCreationRequest")
	golang_proto.RegisterType((*ProfileCreationRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileCreationRequest")
	proto.RegisterType((*ProfileListRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileListRequest")
	golang_proto.RegisterType((*ProfileListRequest)(nil), "grpc.gomeetexamples.apigateway.ProfileListRequest")
	proto.RegisterType((*ProfileList)(nil), "grpc.gomeetexamples.apigateway.ProfileList")
	golang_proto.RegisterType((*ProfileList)(nil), "grpc.gomeetexamples.apigateway.ProfileList")
	proto.RegisterEnum("grpc.gomeetexamples.apigateway.Genders", Genders_name, Genders_value)
	golang_proto.RegisterEnum("grpc.gomeetexamples.apigateway.Genders", Genders_name, Genders_value)
	proto.RegisterEnum("grpc.gomeetexamples.apigateway.ServiceStatus_Status", ServiceStatus_Status_name, ServiceStatus_Status_value)
	golang_proto.RegisterEnum("grpc.gomeetexamples.apigateway.ServiceStatus_Status", ServiceStatus_Status_name, ServiceStatus_Status_value)
}
func (this *EmptyMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EmptyMessage)
	if !ok {
		that2, ok := that.(EmptyMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *VersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VersionResponse)
	if !ok {
		that2, ok := that.(VersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *ServiceStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServiceStatus)
	if !ok {
		that2, ok := that.(ServiceStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.EMsg != that1.EMsg {
		return false
	}
	return true
}
func (this *ServicesStatusList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ServicesStatusList)
	if !ok {
		that2, ok := that.(ServicesStatusList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Services) != len(that1.Services) {
		return false
	}
	for i := range this.Services {
		if !this.Services[i].Equal(that1.Services[i]) {
			return false
		}
	}
	return true
}
func (this *EchoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoRequest)
	if !ok {
		that2, ok := that.(EchoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *EchoResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EchoResponse)
	if !ok {
		that2, ok := that.(EchoResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *ProfileInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileInfo)
	if !ok {
		that2, ok := that.(ProfileInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Birthday != that1.Birthday {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.UpdatedAt != that1.UpdatedAt {
		return false
	}
	if this.DeletedAt != that1.DeletedAt {
		return false
	}
	return true
}
func (this *ProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileRequest)
	if !ok {
		that2, ok := that.(ProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	return true
}
func (this *ProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileResponse)
	if !ok {
		that2, ok := that.(ProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !this.Info.Equal(that1.Info) {
		return false
	}
	return true
}
func (this *ProfileCreationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileCreationRequest)
	if !ok {
		that2, ok := that.(ProfileCreationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Birthday != that1.Birthday {
		return false
	}
	return true
}
func (this *ProfileListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileListRequest)
	if !ok {
		that2, ok := that.(ProfileListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PageNumber != that1.PageNumber {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.ExcludeSoftDeleted != that1.ExcludeSoftDeleted {
		return false
	}
	if this.SoftDeletedOnly != that1.SoftDeletedOnly {
		return false
	}
	if this.Gender != that1.Gender {
		return false
	}
	return true
}
func (this *ProfileList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProfileList)
	if !ok {
		that2, ok := that.(ProfileList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResultSetSize != that1.ResultSetSize {
		return false
	}
	if this.HasMore != that1.HasMore {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiGateway service

type ApiGatewayClient interface {
	// Version method receives no paramaters and returns a version message.
	Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*VersionResponse, error)
	// ServicesStatus method receives no paramaters and returns all services status message
	ServicesStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServicesStatusList, error)
	// Echo method receives a simple message and returns it from svc-echo.
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	// CreateProfile attempts to create a new profile via svc-profile.
	CreateProfile(ctx context.Context, in *ProfileCreationRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// ReadProfile returns information about an existing profile via svc-profile.
	ReadProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileInfo, error)
	// ListProfile returns a list of profiles matching a set of criteria via svc-profile.
	ListProfile(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileList, error)
	// UpdateProfile attempts to update an existing profile via svc-profile.
	UpdateProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileResponse, error)
	// DeleteProfile attempts to delete (logically) an existing profile via svc-profile.
	DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
}

type apiGatewayClient struct {
	cc *grpc.ClientConn
}

func NewApiGatewayClient(cc *grpc.ClientConn) ApiGatewayClient {
	return &apiGatewayClient{cc}
}

func (c *apiGatewayClient) Version(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ServicesStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ServicesStatusList, error) {
	out := new(ServicesStatusList)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/ServicesStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) CreateProfile(ctx context.Context, in *ProfileCreationRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/CreateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ReadProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileInfo, error) {
	out := new(ProfileInfo)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/ReadProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) ListProfile(ctx context.Context, in *ProfileListRequest, opts ...grpc.CallOption) (*ProfileList, error) {
	out := new(ProfileList)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/ListProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) UpdateProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGatewayClient) DeleteProfile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/grpc.gomeetexamples.apigateway.ApiGateway/DeleteProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiGateway service

type ApiGatewayServer interface {
	// Version method receives no paramaters and returns a version message.
	Version(context.Context, *EmptyMessage) (*VersionResponse, error)
	// ServicesStatus method receives no paramaters and returns all services status message
	ServicesStatus(context.Context, *EmptyMessage) (*ServicesStatusList, error)
	// Echo method receives a simple message and returns it from svc-echo.
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	// CreateProfile attempts to create a new profile via svc-profile.
	CreateProfile(context.Context, *ProfileCreationRequest) (*ProfileResponse, error)
	// ReadProfile returns information about an existing profile via svc-profile.
	ReadProfile(context.Context, *ProfileRequest) (*ProfileInfo, error)
	// ListProfile returns a list of profiles matching a set of criteria via svc-profile.
	ListProfile(context.Context, *ProfileListRequest) (*ProfileList, error)
	// UpdateProfile attempts to update an existing profile via svc-profile.
	UpdateProfile(context.Context, *ProfileInfo) (*ProfileResponse, error)
	// DeleteProfile attempts to delete (logically) an existing profile via svc-profile.
	DeleteProfile(context.Context, *ProfileRequest) (*ProfileResponse, error)
}

func RegisterApiGatewayServer(s *grpc.Server, srv ApiGatewayServer) {
	s.RegisterService(&_ApiGateway_serviceDesc, srv)
}

func _ApiGateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).Version(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ServicesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ServicesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/ServicesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ServicesStatus(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).CreateProfile(ctx, req.(*ProfileCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ReadProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ReadProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/ReadProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ReadProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_ListProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).ListProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/ListProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).ListProfile(ctx, req.(*ProfileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).UpdateProfile(ctx, req.(*ProfileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGateway_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGatewayServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gomeetexamples.apigateway.ApiGateway/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGatewayServer).DeleteProfile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gomeetexamples.apigateway.ApiGateway",
	HandlerType: (*ApiGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ApiGateway_Version_Handler,
		},
		{
			MethodName: "ServicesStatus",
			Handler:    _ApiGateway_ServicesStatus_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _ApiGateway_Echo_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _ApiGateway_CreateProfile_Handler,
		},
		{
			MethodName: "ReadProfile",
			Handler:    _ApiGateway_ReadProfile_Handler,
		},
		{
			MethodName: "ListProfile",
			Handler:    _ApiGateway_ListProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _ApiGateway_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _ApiGateway_DeleteProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api-gateway.proto",
}

func NewPopulatedEmptyMessage(r randyApiGateway, easy bool) *EmptyMessage {
	this := &EmptyMessage{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedVersionResponse(r randyApiGateway, easy bool) *VersionResponse {
	this := &VersionResponse{}
	this.Name = string(randStringApiGateway(r))
	this.Version = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServiceStatus(r randyApiGateway, easy bool) *ServiceStatus {
	this := &ServiceStatus{}
	this.Name = string(randStringApiGateway(r))
	this.Version = string(randStringApiGateway(r))
	this.Status = ServiceStatus_Status([]int32{0, 1}[r.Intn(2)])
	this.EMsg = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedServicesStatusList(r randyApiGateway, easy bool) *ServicesStatusList {
	this := &ServicesStatusList{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Services = make([]*ServiceStatus, v1)
		for i := 0; i < v1; i++ {
			this.Services[i] = NewPopulatedServiceStatus(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEchoRequest(r randyApiGateway, easy bool) *EchoRequest {
	this := &EchoRequest{}
	this.Uuid = string(randStringApiGateway(r))
	this.Content = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedEchoResponse(r randyApiGateway, easy bool) *EchoResponse {
	this := &EchoResponse{}
	this.Uuid = string(randStringApiGateway(r))
	this.Content = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileInfo(r randyApiGateway, easy bool) *ProfileInfo {
	this := &ProfileInfo{}
	this.Uuid = string(randStringApiGateway(r))
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	this.Email = string(randStringApiGateway(r))
	this.Name = string(randStringApiGateway(r))
	this.Birthday = string(randStringApiGateway(r))
	this.CreatedAt = string(randStringApiGateway(r))
	this.UpdatedAt = string(randStringApiGateway(r))
	this.DeletedAt = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileRequest(r randyApiGateway, easy bool) *ProfileRequest {
	this := &ProfileRequest{}
	this.Uuid = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileResponse(r randyApiGateway, easy bool) *ProfileResponse {
	this := &ProfileResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		this.Info = NewPopulatedProfileInfo(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileCreationRequest(r randyApiGateway, easy bool) *ProfileCreationRequest {
	this := &ProfileCreationRequest{}
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	this.Email = string(randStringApiGateway(r))
	this.Name = string(randStringApiGateway(r))
	this.Birthday = string(randStringApiGateway(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileListRequest(r randyApiGateway, easy bool) *ProfileListRequest {
	this := &ProfileListRequest{}
	this.PageNumber = uint32(r.Uint32())
	this.PageSize = uint32(r.Uint32())
	this.Order = string(randStringApiGateway(r))
	this.ExcludeSoftDeleted = bool(bool(r.Intn(2) == 0))
	this.SoftDeletedOnly = bool(bool(r.Intn(2) == 0))
	this.Gender = Genders([]int32{0, 1, 2}[r.Intn(3)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProfileList(r randyApiGateway, easy bool) *ProfileList {
	this := &ProfileList{}
	this.ResultSetSize = uint32(r.Uint32())
	this.HasMore = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Profiles = make([]*ProfileInfo, v2)
		for i := 0; i < v2; i++ {
			this.Profiles[i] = NewPopulatedProfileInfo(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApiGateway interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApiGateway(r randyApiGateway) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApiGateway(r randyApiGateway) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneApiGateway(r)
	}
	return string(tmps)
}
func randUnrecognizedApiGateway(r randyApiGateway, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApiGateway(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApiGateway(dAtA []byte, r randyApiGateway, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApiGateway(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApiGateway(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}

func init() { proto.RegisterFile("pb/api-gateway.proto", fileDescriptorApiGateway) }
func init() { golang_proto.RegisterFile("pb/api-gateway.proto", fileDescriptorApiGateway) }

var fileDescriptorApiGateway = []byte{
	// 1505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcf, 0x4f, 0x1b, 0x57,
	0x1e, 0xe7, 0xf9, 0xc7, 0xd8, 0x7c, 0x8d, 0xc1, 0x3c, 0xa1, 0xc4, 0x61, 0xb3, 0x40, 0x26, 0x64,
	0x63, 0x7e, 0x8c, 0x3d, 0x76, 0x08, 0x0b, 0xac, 0x76, 0x89, 0xbd, 0x4b, 0x22, 0x14, 0x20, 0x68,
	0xbc, 0xc9, 0x6a, 0xe3, 0x38, 0xd6, 0xd8, 0x7e, 0x36, 0x23, 0x6c, 0xcf, 0x74, 0x66, 0x4c, 0x02,
	0x81, 0x4a, 0x4d, 0xa5, 0x4a, 0x55, 0x0f, 0xa9, 0xc4, 0xa1, 0x87, 0xde, 0x7a, 0x8a, 0x22, 0x1f,
	0x7a, 0xcc, 0xa1, 0x87, 0x9e, 0x7d, 0xed, 0x1f, 0x40, 0x4b, 0x7b, 0x68, 0x0f, 0xbd, 0xf7, 0x58,
	0xcd, 0x7b, 0x33, 0x66, 0x20, 0x52, 0xc0, 0x0d, 0x6a, 0xd5, 0x13, 0xf3, 0xde, 0xfb, 0x7e, 0x3f,
	0xef, 0x33, 0xdf, 0x5f, 0xf3, 0x31, 0x30, 0xa4, 0x15, 0x13, 0xb2, 0xa6, 0x08, 0x55, 0xd9, 0x24,
	0x4f, 0xe4, 0xed, 0xb8, 0xa6, 0xab, 0xa6, 0x8a, 0x47, 0xaa, 0xba, 0x56, 0x8a, 0x57, 0xd5, 0x3a,
	0x21, 0x26, 0x79, 0x2a, 0xd7, 0xb5, 0x1a, 0x31, 0xe2, 0xb2, 0xa6, 0xd8, 0x56, 0xc3, 0x97, 0xab,
	0xaa, 0x5a, 0xad, 0x11, 0xcb, 0x33, 0x21, 0x37, 0x1a, 0xaa, 0x29, 0x9b, 0x8a, 0xda, 0x30, 0x98,
	0xf7, 0xf0, 0x6c, 0x55, 0x31, 0x37, 0x9a, 0xc5, 0x78, 0x49, 0xad, 0x27, 0xea, 0x4f, 0x14, 0x73,
	0x53, 0x7d, 0x92, 0xa8, 0xaa, 0x02, 0x3d, 0x14, 0xb6, 0xe4, 0x9a, 0x52, 0x96, 0x4d, 0x55, 0x37,
	0x12, 0x9d, 0x47, 0xdb, 0x6f, 0xce, 0xe5, 0xc7, 0xee, 0x3e, 0x72, 0x63, 0xeb, 0x8a, 0xbc, 0x49,
	0xf4, 0x84, 0xeb, 0xd9, 0xf6, 0x14, 0x8e, 0x79, 0x56, 0xd5, 0x04, 0xdd, 0x2e, 0x36, 0x2b, 0x74,
	0x45, 0x17, 0xf4, 0x89, 0x99, 0xf3, 0xfd, 0xd0, 0xb7, 0x54, 0xd7, 0xcc, 0xed, 0x55, 0x62, 0x18,
	0x72, 0x95, 0xf0, 0x59, 0x18, 0x78, 0x40, 0x74, 0x43, 0x51, 0x1b, 0x12, 0x31, 0x34, 0xb5, 0x61,
	0x10, 0x7c, 0x19, 0x7c, 0x0d, 0xb9, 0x4e, 0xa2, 0x68, 0x0c, 0xc5, 0x7a, 0x33, 0xc1, 0x76, 0x8b,
	0xf3, 0x4d, 0x7a, 0x22, 0x48, 0xa2, 0xbb, 0x98, 0x87, 0xc0, 0x16, 0x73, 0x88, 0x7a, 0xdc, 0x06,
	0x51, 0x24, 0x39, 0x07, 0xfc, 0xb7, 0x08, 0xc2, 0x59, 0xa2, 0x6f, 0x29, 0x25, 0x92, 0x35, 0x65,
	0xb3, 0x69, 0xbc, 0x3b, 0x26, 0x5e, 0x01, 0xce, 0xa0, 0x58, 0x51, 0xef, 0x18, 0x8a, 0xf5, 0xa7,
	0x66, 0xe2, 0x6f, 0x4f, 0x54, 0xfc, 0x18, 0x81, 0x38, 0xfb, 0x23, 0xd9, 0x18, 0xf8, 0x32, 0xf8,
	0x49, 0xa1, 0x6e, 0x54, 0xa3, 0x3e, 0x7a, 0x5f, 0xa0, 0xdd, 0xe2, 0xbc, 0xaf, 0x11, 0x92, 0x7c,
	0x64, 0xd5, 0xa8, 0xf2, 0x57, 0x80, 0xb3, 0x79, 0x73, 0xe0, 0xb9, 0x77, 0x37, 0xd2, 0x83, 0x07,
	0x20, 0x74, 0x7f, 0x2d, 0xfd, 0x20, 0xbd, 0xbc, 0x92, 0xce, 0xac, 0x2c, 0x45, 0x10, 0x5f, 0x00,
	0x6c, 0x5f, 0x60, 0x30, 0xd3, 0x15, 0xc5, 0x30, 0xf1, 0x32, 0x04, 0x0d, 0x7b, 0x37, 0x8a, 0xc6,
	0xbc, 0xb1, 0x50, 0x4a, 0xe8, 0x8a, 0xa6, 0xd4, 0x71, 0xe7, 0x25, 0x08, 0x2d, 0x95, 0x36, 0x54,
	0x89, 0xbc, 0xd7, 0x24, 0x86, 0x89, 0x47, 0xc0, 0xd7, 0x6c, 0x2a, 0x65, 0x3b, 0x80, 0xd0, 0x6e,
	0x71, 0x1c, 0xf6, 0x61, 0xcf, 0x83, 0x19, 0x89, 0xee, 0xe3, 0xab, 0x10, 0x28, 0xa9, 0x0d, 0x93,
	0x34, 0x4c, 0x3b, 0x84, 0xbd, 0xed, 0x16, 0xe7, 0x7f, 0x8e, 0x3c, 0xeb, 0x48, 0x72, 0x4e, 0xf8,
	0x2c, 0xf4, 0x31, 0x4c, 0x3b, 0xd3, 0xe7, 0x02, 0xfa, 0xa3, 0x1f, 0x42, 0xeb, 0xba, 0x5a, 0x51,
	0x6a, 0x64, 0xb9, 0x51, 0x51, 0xf1, 0xde, 0x31, 0x50, 0xe5, 0x08, 0xf4, 0xf0, 0x60, 0x34, 0x07,
	0xff, 0x7f, 0x9c, 0x93, 0x85, 0x4a, 0x5a, 0xb8, 0x2d, 0x0a, 0xf3, 0xf9, 0x67, 0x73, 0x7b, 0x82,
	0x7b, 0x39, 0xb3, 0x27, 0xcc, 0xb8, 0xd7, 0x37, 0xf6, 0x84, 0xdc, 0xdc, 0xee, 0xfc, 0xae, 0x9c,
	0xde, 0x2d, 0x66, 0xf2, 0x27, 0x4f, 0x5c, 0xcb, 0x64, 0x6a, 0x6f, 0xdc, 0xe6, 0xbc, 0x0c, 0x5c,
	0x95, 0x34, 0xca, 0x44, 0xa7, 0x94, 0xfb, 0x53, 0xd7, 0x4f, 0x4b, 0xc0, 0x1d, 0x6a, 0x6d, 0xb0,
	0x9a, 0x1b, 0xf6, 0xcc, 0x21, 0xc9, 0x06, 0xc0, 0xaf, 0x10, 0xf8, 0x49, 0x5d, 0x56, 0x6a, 0xb4,
	0xe4, 0x7a, 0x33, 0xfb, 0xc8, 0x32, 0xd9, 0xf1, 0x44, 0xd0, 0xe1, 0xc1, 0xe8, 0x47, 0x08, 0x3e,
	0x44, 0xd6, 0xcb, 0xec, 0xa4, 0x85, 0x87, 0xa2, 0x30, 0x1f, 0xbf, 0x72, 0x75, 0xfc, 0xda, 0xdf,
	0xae, 0x4f, 0x4e, 0x25, 0xfe, 0xb9, 0xf8, 0xb8, 0xf0, 0x6c, 0x77, 0xef, 0x7d, 0x21, 0x3f, 0x75,
	0xeb, 0xe8, 0x3c, 0x1f, 0x5b, 0x5c, 0x38, 0x5a, 0x09, 0xf9, 0x67, 0xe2, 0xf4, 0x6c, 0x72, 0xcf,
	0x75, 0x3e, 0xb1, 0x18, 0x5b, 0x5c, 0x78, 0x14, 0xef, 0xca, 0x63, 0x62, 0x72, 0x5c, 0x62, 0x14,
	0xf1, 0x35, 0xbb, 0xc3, 0x58, 0x41, 0x0f, 0x32, 0xa6, 0x31, 0x8b, 0xa9, 0x5f, 0x43, 0x4f, 0x3f,
	0x73, 0x5a, 0x4d, 0x85, 0x60, 0x51, 0xd1, 0xcd, 0x8d, 0xb2, 0xbc, 0x1d, 0xf5, 0x53, 0xd3, 0x6c,
	0xbb, 0xc5, 0xf5, 0xbe, 0x42, 0x5c, 0xca, 0x17, 0x1c, 0x8c, 0x94, 0x0e, 0x0f, 0x46, 0x33, 0x70,
	0xeb, 0x71, 0x2c, 0x39, 0xbf, 0x9b, 0x12, 0x27, 0x1e, 0x95, 0x1f, 0x95, 0x73, 0xc2, 0x58, 0x22,
	0x9e, 0x8f, 0x89, 0xb9, 0xa4, 0x30, 0x9f, 0xdf, 0x4d, 0xe6, 0xc4, 0x64, 0x2a, 0x3f, 0x71, 0x7c,
	0x33, 0x97, 0x4c, 0xe5, 0x73, 0x16, 0xa3, 0xdd, 0x1b, 0x39, 0x31, 0x99, 0x9f, 0x18, 0x97, 0x3a,
	0x97, 0xe0, 0x0c, 0x40, 0x49, 0x27, 0xb2, 0x49, 0xca, 0x05, 0xd9, 0x8c, 0x72, 0xf4, 0xca, 0xab,
	0xed, 0x16, 0x37, 0x5a, 0xfc, 0x2b, 0xbe, 0x94, 0x12, 0xc5, 0x59, 0x41, 0x4c, 0x0a, 0x62, 0xea,
	0xbf, 0xc9, 0x9b, 0x0b, 0xe2, 0xcc, 0x82, 0x78, 0xf3, 0xa1, 0xf8, 0xf7, 0x05, 0x51, 0x9c, 0x43,
	0x52, 0xaf, 0xed, 0x96, 0x36, 0x2d, 0x8c, 0xa6, 0x56, 0x76, 0x30, 0x02, 0x5d, 0x60, 0xd8, 0x6e,
	0x0c, 0xa3, 0x4c, 0x6a, 0xc4, 0xc6, 0x08, 0x76, 0x81, 0x61, 0xbb, 0xa5, 0x4d, 0xfe, 0x05, 0x82,
	0x7e, 0xbb, 0xd4, 0x9d, 0xbe, 0xfc, 0x63, 0xab, 0x9d, 0xaf, 0xc3, 0x40, 0x87, 0x90, 0xdd, 0xd4,
	0x97, 0xc0, 0xa3, 0x6e, 0x52, 0x3e, 0x41, 0xd6, 0xaf, 0xe0, 0xc5, 0x28, 0x29, 0x79, 0xd4, 0x4d,
	0xbc, 0x08, 0x3e, 0xa5, 0x51, 0x51, 0x69, 0x67, 0x84, 0x52, 0x53, 0xa7, 0x75, 0x86, 0xab, 0xab,
	0x25, 0xea, 0xc8, 0xbf, 0xf4, 0xc2, 0x05, 0x7b, 0xf7, 0xdf, 0x56, 0x76, 0xe8, 0x67, 0x83, 0x05,
	0xe2, 0xa8, 0xef, 0xd0, 0xf9, 0xf5, 0x9d, 0xe7, 0xcf, 0xd3, 0x77, 0xde, 0xb3, 0xf7, 0x9d, 0xef,
	0x77, 0xe8, 0x3b, 0xfe, 0x67, 0x0f, 0x60, 0x3b, 0x55, 0xd6, 0xa7, 0xc9, 0x49, 0x93, 0x08, 0x21,
	0x4d, 0xae, 0x92, 0x42, 0xa3, 0x59, 0x2f, 0xda, 0xb9, 0x0a, 0x67, 0x06, 0x3a, 0x65, 0x72, 0x78,
	0x30, 0xea, 0x89, 0xf4, 0x48, 0x60, 0xd9, 0xac, 0x51, 0x13, 0x9c, 0x84, 0x5e, 0xea, 0x61, 0x28,
	0x3b, 0x84, 0x26, 0x24, 0x9c, 0x19, 0x6a, 0xb7, 0xb8, 0x00, 0xf8, 0xb1, 0x37, 0x25, 0x8a, 0xd6,
	0x8b, 0x46, 0x7a, 0xa2, 0x3f, 0x05, 0xa4, 0xa0, 0x65, 0x96, 0x55, 0x76, 0x08, 0x9e, 0x06, 0xbf,
	0xaa, 0x5b, 0xa5, 0xc0, 0x82, 0x72, 0xa1, 0xdd, 0xe2, 0x30, 0x44, 0x70, 0xff, 0xd1, 0x20, 0x18,
	0x93, 0x8d, 0x92, 0xc4, 0x8c, 0xf0, 0xbf, 0x60, 0x88, 0x3c, 0x2d, 0xd5, 0x9a, 0x65, 0x52, 0x30,
	0xd4, 0x8a, 0x59, 0xb0, 0xfb, 0x8d, 0x86, 0x29, 0x98, 0xe9, 0x6b, 0xb7, 0xb8, 0x20, 0x70, 0xd8,
	0x67, 0xea, 0x4d, 0x22, 0x61, 0xdb, 0x32, 0xab, 0x56, 0xcc, 0xff, 0x30, 0x3b, 0x3c, 0x0f, 0x83,
	0x6e, 0xbf, 0x82, 0xda, 0xa8, 0xb1, 0xd9, 0x16, 0xcc, 0x84, 0xad, 0x18, 0x43, 0x00, 0xfb, 0x2b,
	0x72, 0xcd, 0x20, 0xd2, 0x80, 0x71, 0xe4, 0x76, 0xaf, 0x51, 0xdb, 0x76, 0x15, 0x2d, 0xf7, 0x8e,
	0x45, 0xcb, 0x7f, 0x85, 0x3a, 0x9f, 0x41, 0x2a, 0x05, 0x92, 0x30, 0xa0, 0x13, 0xa3, 0x59, 0x33,
	0x0b, 0x06, 0x31, 0x59, 0xf0, 0x58, 0xb0, 0x3b, 0x3d, 0x79, 0x53, 0x0a, 0x33, 0x8b, 0x2c, 0x31,
	0x69, 0xd8, 0x62, 0x10, 0xdc, 0x90, 0x8d, 0x42, 0x5d, 0xd5, 0x59, 0xa0, 0xdf, 0xe0, 0x1f, 0xd8,
	0x90, 0x8d, 0x55, 0x55, 0x27, 0x78, 0x1d, 0x82, 0x1a, 0xbb, 0xcb, 0x92, 0x43, 0xde, 0x2e, 0x9b,
	0x99, 0xc9, 0x9d, 0x2f, 0x91, 0x5f, 0xea, 0xa0, 0x4c, 0x4e, 0x41, 0xc0, 0x7e, 0x37, 0x0c, 0xc0,
	0xdd, 0x5f, 0xbb, 0xbb, 0x76, 0xef, 0x7f, 0x91, 0x1e, 0x1c, 0x04, 0xdf, 0x6a, 0xda, 0x12, 0x3c,
	0xd6, 0xee, 0xed, 0x25, 0xfa, 0xec, 0x49, 0x7d, 0xdc, 0x0b, 0x90, 0xd6, 0x94, 0x3b, 0x0c, 0x1a,
	0x7f, 0x80, 0x20, 0x60, 0x8b, 0x48, 0x3c, 0x7d, 0x1a, 0x0f, 0xb7, 0xfa, 0x1c, 0x4e, 0x9c, 0x66,
	0x7d, 0x42, 0x9b, 0xf2, 0x17, 0x9f, 0x7f, 0xf3, 0xc3, 0xbe, 0x67, 0x10, 0x0f, 0x50, 0xfd, 0xbd,
	0x95, 0x4c, 0x38, 0xf2, 0x70, 0x1f, 0x41, 0xff, 0x71, 0x41, 0xd6, 0x25, 0x95, 0xd4, 0x19, 0x85,
	0x9a, 0x4b, 0xee, 0xf1, 0xa3, 0x94, 0xcd, 0x25, 0x7c, 0xd1, 0x61, 0xe3, 0xa8, 0xb7, 0x84, 0x2d,
	0x33, 0x77, 0xc0, 0x67, 0x09, 0x2e, 0x7c, 0x6a, 0x76, 0x5c, 0x52, 0x6f, 0x78, 0xfa, 0x6c, 0xc6,
	0xc7, 0x23, 0xc2, 0xf7, 0x39, 0x1c, 0x48, 0x69, 0x43, 0x5d, 0x40, 0x93, 0xf8, 0x73, 0x04, 0x61,
	0x3a, 0xa4, 0x89, 0x9d, 0x7a, 0x3c, 0x7b, 0xc6, 0x1a, 0x39, 0x31, 0xda, 0x4f, 0xcf, 0xd2, 0x89,
	0x4f, 0x10, 0x7f, 0x85, 0x72, 0xfa, 0x0b, 0x7f, 0xc1, 0xe1, 0x64, 0x97, 0x59, 0x82, 0x0d, 0x00,
	0x8b, 0xdd, 0x27, 0x08, 0x42, 0x12, 0x91, 0xcb, 0x0e, 0xb7, 0xf8, 0x99, 0xef, 0x60, 0x9c, 0xba,
	0xa9, 0x77, 0x27, 0x4f, 0xfc, 0xd0, 0x49, 0x3e, 0x3a, 0x91, 0xcb, 0x16, 0x9b, 0x17, 0x08, 0x42,
	0x56, 0x46, 0x1d, 0x36, 0xa9, 0x33, 0xa2, 0xbb, 0x26, 0xeb, 0x99, 0x19, 0xb9, 0x2b, 0xe7, 0x4d,
	0x46, 0x35, 0xc5, 0x30, 0x2d, 0x46, 0x9f, 0x22, 0x08, 0xdf, 0xa7, 0xe2, 0xc5, 0xe1, 0xd4, 0xcd,
	0x1b, 0x9f, 0x63, 0xca, 0x98, 0x82, 0xb2, 0x28, 0xed, 0x23, 0x08, 0xb3, 0xe1, 0xf9, 0x5b, 0x93,
	0x76, 0x7e, 0xac, 0xd8, 0xac, 0x5f, 0x40, 0x93, 0x99, 0xcd, 0x5f, 0xbe, 0x1b, 0x41, 0x2f, 0x0f,
	0x47, 0xd0, 0xeb, 0xc3, 0x11, 0xf4, 0xf5, 0xf7, 0x23, 0x08, 0xc6, 0x4a, 0x6a, 0xfd, 0x2d, 0x77,
	0x6c, 0x25, 0x1f, 0x8a, 0x6f, 0xfc, 0xda, 0x16, 0x1c, 0xcb, 0x84, 0xb1, 0x55, 0x12, 0x5c, 0xff,
	0x15, 0x48, 0x68, 0xc5, 0x7f, 0x68, 0xc5, 0x2f, 0x3c, 0xbe, 0x3b, 0xab, 0xeb, 0x99, 0x22, 0x47,
	0x7f, 0x44, 0xdf, 0xf8, 0x35, 0x00, 0x00, 0xff, 0xff, 0x93, 0x06, 0xa4, 0x13, 0x3b, 0x10, 0x00,
	0x00,
}
